// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  image             String
  Recipe_name       String
  Description       String
  rating            String
  type              String
  Price             Float
  Ingredients       String[]
  Steps             String[]
  Serving_Size      Int
  personalizations  String[]
  Protein           Float
  Fat               Float
  Carbohydrates     Float
  Calories          Float
  Available         Boolean
  Key_Ingredients   String[]
  Allergens         String[]
  Discount          Float
}



model Ingredient {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  Ingredient_name   String
  Total_Calories    Float
  Available         Boolean
  Recipes           String[]
}

model address {
  id            String  @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  FlatNumber    String
  Street        String
  City          String
  Pincode       String
  State         String
  Country       String
  latitude      String
  longitude     String
  Geohash       String
}

model service {
  id            String  @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  Location      String
  latitude      Decimal
  longitude     Decimal
  Geohash       String
}

model MealPlan {
  id               Int      @id @default(autoincrement())
  userId           String   @unique
  personalizations String[]
  monday           Json
  tuesday          Json
  wednesday        Json
  thursday         Json
  friday           Json
  saturday         Json
  sunday           Json
}

// model DayPlan {
//   id        String   @id @default(uuid())
//   breakfast Json
//   lunch     Json
//   dinner    Json
// }

model PaymentOptions {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  RecentlyUsed      String[]
  UPI               String[]
  Credit_cards      String[] //this will contain the id of the Card Model
  More              String[]
  Pay_later         String[]
}

model card {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  CardNumber         Int
  ValidThroughMonth  Int
  ValidThroughYear   Int
  CVV                Int
  CardHolderName     String
}

model UPI{
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  UPI_ID             String
  UPI_Name           String
}

model delivery{
  id       String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  orderID           String
  deliveryAddress    String
  //deliveryTime       DateTime
  deliveryStatus    DeliveryStatus @default(PENDING)
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  responses Response[]
}

model Question {
  id        Int       @id @default(autoincrement())
  Question  String
  responses Response[]
}

model Response {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String
  questionId Int
  answer     String

  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}